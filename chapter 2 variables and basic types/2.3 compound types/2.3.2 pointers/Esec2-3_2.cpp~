#include <iostream>

int main()
{
    /*
     * Exercise 2.18: Write code to change the value of a pointer. Write code to change the value to which the pointer
     * points
     */
    int *p = {nullptr};

    int s = {9}, s2 = {3};

    p = &s;
    std::cout << "*p's first value is " << *p << std::endl;
    p = &s2;
    std::cout << "*p's second value is " << *p << std::endl;

    *p = {9};

    std::cout << "s2's now equal to " << s2 << " from 3" << std::endl;

    /*
     * Exercise 2.19 : Explain the key differences between pointers and references
     *
     * Pointers are objects that can point to different objects during their lifespan, allowing callers to indirectly change the pointed at object
     * References are not object, and are essentially another name for an object, unable to be changed during its lifespace
     */

    /*
     * Exercise 2.20 : What does the following program do?
     * int i = 42;
     * int *p1 = &i;
     * *p1 = *p1 *  *p1;
     * squares the value
     */
     
}

int exercise2_18()
{
}

     /*
      * Explain each of the following definitions. Indicate whether any are illegal and, if so, why
      * int i = 0;
      * (a) double* dp = &i; (b) int *ip = i; (c) int *p = &i
      * a. Illegal, double has an asterisk at the end of it
      * b. Illegal, while the pointer is of the same type as the variable it's pointing to, it's not actually going to work because the types are different, 
      * c. Legal, the pointer is getting the address of i, which will allow it to interact with i
      */



